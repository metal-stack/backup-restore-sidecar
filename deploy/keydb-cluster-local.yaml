# THESE EXAMPLES ARE GENERATED!
# Use them as a template for your deployment, but do not commit manual changes to these files.
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  creationTimestamp: null
  labels:
    app: keydb
  name: keydb
spec:
  replicas: 3
  selector:
    matchLabels:
      app: keydb
  serviceName: keydb-headless
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: keydb
    spec:
      containers:
      - command:
        - backup-restore-sidecar
        - wait
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        image: eqalpha/keydb
        name: keydb
        ports:
        - containerPort: 6379
          name: client
          protocol: TCP
        resources: {}
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /usr/local/bin/backup-restore-sidecar
          name: bin-provision
          subPath: backup-restore-sidecar
        - mountPath: /etc/backup-restore-sidecar
          name: backup-restore-sidecar-config
        - mountPath: /utils
          name: backup-restore-sidecar-utils
      - command:
        - backup-restore-sidecar
        - start
        - --log-level=debug
        image: eqalpha/keydb
        name: backup-restore-sidecar
        ports:
        - containerPort: 8000
          name: grpc
        resources: {}
        volumeMounts:
        - mountPath: /backup
          name: backup
        - mountPath: /data
          name: data
        - mountPath: /etc/backup-restore-sidecar
          name: backup-restore-sidecar-config
        - mountPath: /utils
          name: backup-restore-sidecar-utils
        - mountPath: /usr/local/bin/backup-restore-sidecar
          name: bin-provision
          subPath: backup-restore-sidecar
      initContainers:
      - command:
        - cp
        - /backup-restore-sidecar
        - /bin-provision
        image: ghcr.io/metal-stack/backup-restore-sidecar:latest
        imagePullPolicy: IfNotPresent
        name: backup-restore-sidecar-provider
        resources: {}
        volumeMounts:
        - mountPath: /bin-provision
          name: bin-provision
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: data
      - name: backup
        persistentVolumeClaim:
          claimName: backup
      - configMap:
          name: backup-restore-sidecar-config-keydb
        name: backup-restore-sidecar-config
      - name: backup-restore-sidecar-utils
        secret:
          defaultMode: 493
          items:
          - key: keydb-cluster.sh
            path: keydb-cluster.sh
          secretName: backup-restore-sidecar-util-keydb
      - emptyDir: {}
        name: bin-provision
  updateStrategy: {}
  volumeClaimTemplates:
  - metadata:
      creationTimestamp: null
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
    status: {}
  - metadata:
      creationTimestamp: null
      name: backup
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
    status: {}
status:
  availableReplicas: 0
  replicas: 0
---
apiVersion: v1
data:
  config.yaml: |
    ---
    bind-addr: 0.0.0.0
    db: keydb
    db-data-directory: /data/
    backup-provider: local
    backup-cron-schedule: "*/1 * * * *"
    object-prefix: keydb-test
    redis-addr: localhost:6379
    post-exec-cmds:
    - /utils/keydb-cluster.sh
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: backup-restore-sidecar-config-keydb
---
apiVersion: v1
kind: Secret
metadata:
  creationTimestamp: null
  name: backup-restore-sidecar-util-keydb
stringData:
  keydb-cluster.sh: "#!/bin/bash\nset -ex\n\n# FIXME: Hostname is actually backup-restore-sidecar-control-plane\nenv\nreplicas=()\n\nfor
    node in {0..2}; do\n  if [ \"${MY_POD_NAME}\" != \"keydb-${node}\" ]; then\n\t
    \ replicas+=(\"--replicaof keydb-${node}-headless.keydb.default.svc.cluster.local
    6379\")\n  fi\ndone\nkeydb-server /etc/keydb/redis.conf \\\n\t--active-replica
    yes \\\n\t--multi-master yes \\\n\t--appendonly no \\\n\t--bind \"0.0.0.0\" \\\n\t--port
    6379 \\\n\t--protected-mode no \\\n\t\"${replicas[@]}\"\n"
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  name: keydb-headless
spec:
  ports:
  - name: server
    port: 6379
    protocol: TCP
    targetPort: keydb
  selector:
    app: keydb
  type: ClusterIP
status:
  loadBalancer: {}
