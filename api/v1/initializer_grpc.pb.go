// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/initializer.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InitializerService_Status_FullMethodName = "/v1.InitializerService/Status"
)

// InitializerServiceClient is the client API for InitializerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InitializerServiceClient interface {
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type initializerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInitializerServiceClient(cc grpc.ClientConnInterface) InitializerServiceClient {
	return &initializerServiceClient{cc}
}

func (c *initializerServiceClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, InitializerService_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InitializerServiceServer is the server API for InitializerService service.
// All implementations should embed UnimplementedInitializerServiceServer
// for forward compatibility
type InitializerServiceServer interface {
	Status(context.Context, *Empty) (*StatusResponse, error)
}

// UnimplementedInitializerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInitializerServiceServer struct {
}

func (UnimplementedInitializerServiceServer) Status(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

// UnsafeInitializerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InitializerServiceServer will
// result in compilation errors.
type UnsafeInitializerServiceServer interface {
	mustEmbedUnimplementedInitializerServiceServer()
}

func RegisterInitializerServiceServer(s grpc.ServiceRegistrar, srv InitializerServiceServer) {
	s.RegisterService(&InitializerService_ServiceDesc, srv)
}

func _InitializerService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InitializerServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InitializerService_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InitializerServiceServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// InitializerService_ServiceDesc is the grpc.ServiceDesc for InitializerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InitializerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.InitializerService",
	HandlerType: (*InitializerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _InitializerService_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/initializer.proto",
}
