package main

import (
	"fmt"
	"os"
	"path"
	"runtime"

	"github.com/metal-stack/backup-restore-sidecar/pkg/generate/examples/examples"
	appsv1 "k8s.io/api/apps/v1"

	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/yaml"
)

func main() {
	// etcd
	err := dumpToExamples(examples.EtcdDatabaseName+"-local.yaml", append([]client.Object{examples.EtcdSts("default", "")}, examples.EtcdBackingResources("default")...)...)
	if err != nil {
		panic(err)
	}

	// meilisearch
	err = dumpToExamples(examples.MeilisearchDatabaseName+"-local.yaml", append([]client.Object{examples.MeilisearchSts("default", "")}, examples.MeilisearchBackingResources("default")...)...)
	if err != nil {
		panic(err)
	}

	// postgres
	err = dumpToExamples(examples.PostgresDatabaseName+"-local.yaml", append([]client.Object{examples.PostgresSts("default", "")}, examples.PostgresBackingResources("default")...)...)
	if err != nil {
		panic(err)
	}

	// rethinkdb
	err = dumpToExamples(examples.RethinkDbDatabaseName+"-local.yaml", append([]client.Object{examples.RethinkDbSts("default", "")}, examples.RethinkDbBackingResources("default")...)...)
	if err != nil {
		panic(err)
	}
}

func dumpToExamples(name string, resources ...client.Object) error {
	content := []byte(`# DO NOT EDIT! This is auto-generated by the integration tests
---
`)

	for i, r := range resources {
		r.SetNamespace("") // not needed for example manifests

		r := r.DeepCopyObject()

		if sts, ok := r.(*appsv1.StatefulSet); ok {
			// host network is only for integration testing purposes
			sts.Spec.Template.Spec.HostNetwork = false
		}

		raw, err := yaml.Marshal(r)
		if err != nil {
			return err
		}

		if i != len(resources)-1 {
			raw = append(raw, []byte("---\n")...)
		}

		content = append(content, raw...)
	}

	_, filename, _, _ := runtime.Caller(1)

	dest := path.Join(path.Dir(filename), "../../..", "deploy", name)
	fmt.Printf("example manifest written to %s\n", dest)

	err := os.WriteFile(dest, content, 0600)
	if err != nil {
		return err
	}

	return nil
}
